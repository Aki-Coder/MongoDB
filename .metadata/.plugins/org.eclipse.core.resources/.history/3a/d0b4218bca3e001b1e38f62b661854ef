package nosql.monogodb.projekat.main;

import static org.bson.codecs.configuration.CodecRegistries.fromProviders;
import static org.bson.codecs.configuration.CodecRegistries.fromRegistries;

import java.io.FileReader;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import org.bson.codecs.configuration.CodecRegistry;
import org.bson.codecs.pojo.PojoCodecProvider;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.mongodb.ConnectionString;
import com.mongodb.MongoClientSettings;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.opencsv.CSVReader;
import com.opencsv.CSVReaderBuilder;

import nosql.mongodb.projekat.model.Company;
import nosql.mongodb.projekat.model.Country;
import nosql.mongodb.projekat.model.Genre;
import nosql.mongodb.projekat.model.Keywoard;
import nosql.mongodb.projekat.model.Movie;
import nosql.mongodb.projekat.model.Production;
import nosql.mongodb.projekat.model.Vote;

public class CsvToJson {

	public static List<Movie> createJson() {
		try {

			// kreiranje objekta fileReader sa CSV fajlom kao parametrom
			FileReader fileReader = new FileReader("tmdb_5000_movies1.csv");

			// kreiranje csvReader objekta, fileReader kao parametar
			// skipujemo header fajla(kolone)
			CSVReader csvReader = new CSVReaderBuilder(fileReader).withSkipLines(1).build();

			// niz linija u fajlu
			String[] nextLine;

			// za rad sa datumom
			SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy");

			ObjectMapper om = new ObjectMapper();

			int i = 1;

			List<Movie> movies = new ArrayList<Movie>();

			// citanje podataka liniju po liniju
			while ((nextLine = csvReader.readNext()) != null) {
				System.out.println("----- Linija u fajlu ----- " + i + "\n");
				System.out.println("----- Duzina linije -----" + nextLine.length + "\n");

				Movie m = new Movie();
				if (nextLine[0] != null && nextLine[0] != "") {
					long budget = Long.parseLong(nextLine[0]);
					m.setBudget(budget);
				}
				System.out.println(m.getBudget());

				ArrayList<Genre> genres = new ArrayList<Genre>();
				if (nextLine[1] != null && nextLine[1] != "") {

					String json = nextLine[1];
					System.out.println(json);
					genres = om.readValue(json, new TypeReference<ArrayList<Genre>>() {
					});
					m.setGenres(genres);
				}
				// m.getGenres().forEach(x -> System.out.println(x.id + " | " + x.name));

				if (nextLine[2] != null && !"".equals(nextLine[2])) {
					m.setHomepage(nextLine[2]);
				}

				if (nextLine[3] != null && nextLine[3] != "")
					m.setId(Integer.parseInt(nextLine[3]));

				ArrayList<Keywoard> keywoards = new ArrayList<Keywoard>();
				if (nextLine[4] != null && nextLine[4] != "") {
					String json = nextLine[4];
					System.out.println(json);
					keywoards = om.readValue(json, new TypeReference<ArrayList<Keywoard>>() {
					});

					m.setKeywoards(keywoards);
				}

				if (nextLine[5] != null && nextLine[5] != "" && nextLine[6] != null && nextLine[6] != ""
						&& nextLine[7] != null && nextLine[7] != "" && nextLine[8] != null && nextLine[8] != "") {
					m.setOriginal_language(nextLine[5]);
					m.setOriginal_title(nextLine[6]);
					m.setOverview(nextLine[7]);
					m.setPopularity(Double.parseDouble(nextLine[8]));
				}

				Production p = new Production();
				ArrayList<Company> companies = new ArrayList<Company>();
				if (nextLine[9] != null && nextLine[9] != "") {
					String json = nextLine[9];
					companies = om.readValue(json, new TypeReference<ArrayList<Company>>() {
					});

					p.setCompanies(companies);
				}

				ArrayList<Country> countries = new ArrayList<Country>();
				if (nextLine[10] != null && nextLine[10] != null) {
					String json = nextLine[10];
					countries = om.readValue(json, new TypeReference<ArrayList<Country>>() {
					});
					p.setCountries(countries);
				}
				try {
					m.setRelease_date(sdf.parse(nextLine[11]));
				} catch (ParseException e) {
					e.printStackTrace();
				}

				if (nextLine[12] != null && nextLine[12] != "") {
					m.setRevenue(Long.parseLong(nextLine[12]));
					
				}
				if (nextLine[13] != null && !"".equals(nextLine[13])) {
					m.setRuntime(Integer.parseInt(nextLine[13]));
					
				}
				if (nextLine[14] != null && !"".equals(nextLine[14])) {
					m.setStatus(nextLine[14]);
					
				}
				if (nextLine[15] != null && !"".equals(nextLine[15])) {
					m.setTagline(nextLine[15]);
					
				}
				if (nextLine[16] != null && !"".equals(nextLine[16])) {
					m.setTitle(nextLine[16]);
				}

				Vote v = new Vote();
				double vote_average = Double.parseDouble(nextLine[17]);
				int vote_count = Integer.parseInt(nextLine[18]);

				movies.add(m);
				System.out.println("----- -----");
				System.out.println(i);
				i++;

			}

			csvReader.close();

			return movies;
		} catch (

		Exception e) {
			e.printStackTrace();
			return null;
		}

	}

	public static boolean upisiUBazu(List<Movie> movies) {
		try {
			ConnectionString connectionString = new ConnectionString("mongodb://localhost:27017");
			CodecRegistry pojoCodecRegistry = fromProviders(PojoCodecProvider.builder().automatic(true).build());
			CodecRegistry codecRegistry = fromRegistries(MongoClientSettings.getDefaultCodecRegistry(),
					pojoCodecRegistry);
			MongoClientSettings clientSettings = MongoClientSettings.builder().applyConnectionString(connectionString)
					.codecRegistry(codecRegistry).build();

			MongoClient mongoClient = MongoClients.create(clientSettings);

			MongoDatabase db = mongoClient.getDatabase("nosql");
			MongoCollection<Movie> col = db.getCollection("Movies", Movie.class);
			int i = 1;
			for (Movie m : movies) {
				System.out.println("Inserting movies " + i);
				col.insertMany(extracted(m));
				i++;
			}
			mongoClient.close();

			return true;

		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	private static List<? extends Movie> extracted(Movie m) {
		return (List<? extends Movie>) m;
	}

	public static void main(String[] args) {
		List<Movie> movies = createJson();
		upisiUBazu(movies);

	}

}
